Voici vos manifests Kubernetes pour NetBox.
Points clés :

ConfigMaps et Secrets pour les variables d'environnement
PVCs pour le stockage persistant
Services pour l'exposition des ports
Deployments pour chaque composant

À configurer avant déploiement :

Modifier les mots de passe dans le Secret (encoder en base64)
Ajuster les variables NetBox dans la ConfigMap
Adapter les tailles de stockage selon vos besoins

Déploiement :
bashkubectl apply -f netbox-manifests.yaml
Le service NetBox sera accessible via LoadBalancer sur le port 8080.





# ConfigMaps pour les variables d'environnement
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: netbox-config
data:
  # Ajouter vos variables NetBox ici
  NETBOX_DB_HOST: postgres
  NETBOX_REDIS_HOST: redis
  NETBOX_REDIS_CACHE_HOST: redis-cache

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  POSTGRES_DB: netbox
  POSTGRES_USER: netbox

---
# Secrets pour les mots de passe
apiVersion: v1
kind: Secret
metadata:
  name: netbox-secrets
type: Opaque
data:
  # Encoder en base64: echo -n 'your-password' | base64
  POSTGRES_PASSWORD: cG9zdGdyZXMtcGFzcw==
  REDIS_PASSWORD: cmVkaXMtcGFzcw==

---
# PersistentVolumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-cache-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: netbox-media-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:17-alpine
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: netbox-secrets
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -q
            - -t
            - "2"
            - -d
            - $(POSTGRES_DB)
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 30
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: valkey/valkey:8.1-alpine
        command:
        - sh
        - -c
        - valkey-server --appendonly yes --requirepass $REDIS_PASSWORD
        envFrom:
        - secretRef:
            name: netbox-secrets
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - '[ $(valkey-cli --pass "$REDIS_PASSWORD" ping) = "PONG" ]'
          initialDelaySeconds: 5
          periodSeconds: 1
          timeoutSeconds: 3
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Redis Cache Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cache
  template:
    metadata:
      labels:
        app: redis-cache
    spec:
      containers:
      - name: redis-cache
        image: valkey/valkey:8.1-alpine
        command:
        - sh
        - -c
        - valkey-server --requirepass $REDIS_PASSWORD
        envFrom:
        - secretRef:
            name: netbox-secrets
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-cache-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - '[ $(valkey-cli --pass "$REDIS_PASSWORD" ping) = "PONG" ]'
          initialDelaySeconds: 5
          periodSeconds: 1
          timeoutSeconds: 3
      volumes:
      - name: redis-cache-storage
        persistentVolumeClaim:
          claimName: redis-cache-pvc

---
# Redis Cache Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cache
spec:
  selector:
    app: redis-cache
  ports:
  - port: 6379
    targetPort: 6379

---
# NetBox Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app: netbox
  template:
    metadata:
      labels:
        app: netbox
    spec:
      containers:
      - name: netbox
        image: netboxcommunity/netbox:v4.3-3.3.0
        envFrom:
        - configMapRef:
            name: netbox-config
        - secretRef:
            name: netbox-secrets
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: netbox-media
          mountPath: /opt/netbox/netbox/media
        livenessProbe:
          httpGet:
            path: /login/
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /login/
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: netbox-media
        persistentVolumeClaim:
          claimName: netbox-media-pvc

---
# NetBox Service
apiVersion: v1
kind: Service
metadata:
  name: netbox
spec:
  selector:
    app: netbox
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer

---
# NetBox Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: netbox-worker
  template:
    metadata:
      labels:
        app: netbox-worker
    spec:
      containers:
      - name: netbox-worker
        image: netboxcommunity/netbox:v4.3-3.3.0
        command:
        - /opt/netbox/venv/bin/python
        - /opt/netbox/netbox/manage.py
        - rqworker
        envFrom:
        - configMapRef:
            name: netbox-config
        - secretRef:
            name: netbox-secrets
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - ps -aux | grep -v grep | grep -q rqworker
          initialDelaySeconds: 20
          periodSeconds: 15
          timeoutSeconds: 3

---
# NetBox Housekeeping Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-housekeeping
spec:
  replicas: 1
  selector:
    matchLabels:
      app: netbox-housekeeping
  template:
    metadata:
      labels:
        app: netbox-housekeeping
    spec:
      containers:
      - name: netbox-housekeeping
        image: netboxcommunity/netbox:v4.3-3.3.0
        command:
        - /opt/netbox/housekeeping.sh
        envFrom:
        - configMapRef:
            name: netbox-config
        - secretRef:
            name: netbox-secrets
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - ps -aux | grep -v grep | grep -q housekeeping
          initialDelaySeconds: 20
          periodSeconds: 15
          timeoutSeconds: 3
