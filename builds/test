Structure du projet
terraform-netbox/
├── main.tf                 # Entrée principale
├── variables.tf            # Variables globales
├── outputs.tf              # Sorties globales
├── versions.tf             # Déclaration du provider NetBox
└── modules/
    └── prefix_alloc/
        ├── main.tf         # Logique de réservation d’un /24
        ├── variables.tf    # Variables du module
        └── outputs.tf      # Sorties du module
🔑 Contenu complet
1️⃣ main.tf (racine)
terraform {
  required_version = ">= 1.3"

  required_providers {
    netbox = {
      source  = "cloudnativeapp/terraform-provider-netbox"
      version = ">= 0.19.0"
    }
  }
}

# --- Provider à la racine (sans alias) -----------------------------------
provider "netbox" {
  url             = var.netbox_url
  token           = var.netbox_token
  skip_tls_verify = true
}

# --- Exemple de liste de réservations ------------------------------------
locals {
  reservations = [
    {
      name          = "private_rfc1918"
      aggregate_id  = 10          # ID d’un aggregate 10.0.0.0/8 dans NetBox
      prefix_length = 24
      tag_ids       = []          # pas de tags à filtrer
    },
    {
      name          = "bgp_public"
      aggregate_id  = 20          # ID d’un aggregate 203.0.113.0/24 dans NetBox
      prefix_length = 24
      tag_ids       = ["bgp"]     # tag(s) qui doivent être présents
    }
  ]
}

# --- Instanciation du module pour chaque réservation ----------------------
module "prefix_alloc" {
  for_each = { for r in local.reservations : r.name => r }

  source       = "./modules/prefix_alloc"
  aggregate_id = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids     = each.value.tag_ids
  description = "Allocated by Terraform (${each.key})"
  role        = null
  status      = "active"
}

# --- Sorties de haut niveau ----------------------------------------------
output "allocated_prefixes" {
  description = "Map de nom => CIDR alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix }
}

output "allocated_prefix_ids" {
  description = "Map de nom => ID NetBox du prefix alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix_id }
}
2️⃣ variables.tf (racine)
variable "netbox_url" {
  description = "URL de l’instance NetBox (ex : http://localhost:2025)"
  type        = string
  default     = "http://localhost:2025"
}

# On ne donne pas de default pour le token – il sera fourni via TF_VAR_…
variable "netbox_token" {
  description = "Token d’API NetBox (à mettre dans TF_VAR_netbox_token)"
  type        = string
  sensitive   = true
}

variable "aggregate_id" { /* pas utilisé directement ici, mais présent pour documentation */
  description = "Id d’aggregate (pour les variables locales)"
  type        = number
}
Important
Si vous utilisez un token d’environnement vous n’avez rien à mettre dans default.

export TF_VAR_netbox_token="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
3️⃣ outputs.tf (racine)
output "allocated_prefixes" {
  description = "Map de nom => CIDR alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix }
}

output "allocated_prefix_ids" {
  description = "Map de nom => ID NetBox du prefix alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix_id }
}
4️⃣ versions.tf (racine)
(Facultatif – il suffit d’avoir le bloc required_providers dans main.tf, mais pour garder les choses séparées on peut le mettre dans un fichier dédié)

terraform {
  required_version = ">= 1.3"

  required_providers {
    netbox = {
      source  = "cloudnativeapp/terraform-provider-netbox"
      version = ">= 0.19.0"
    }
  }
}
5️⃣ modules/prefix_alloc/main.tf
# --- Données pour trouver un /24 disponible dans l’aggregate --------------
data "netbox_prefix" "available_prefix" {
  available = true
  container = var.aggregate_id
  length    = var.prefix_length
  tags      = var.tag_ids
}

# --- Création réelle du prefix -------------------------------------------
resource "netbox_prefix" "allocated" {
  prefix      = data.netbox_prefix.available_prefix.prefix
  description = var.description
  role        = var.role
  status      = var.status
  tags        = var.tag_ids
}
6️⃣ modules/prefix_alloc/variables.tf
variable "aggregate_id" {
  description = "ID du container (aggregate) à partir duquel réserver"
  type        = number
}

variable "prefix_length" {
  description = "Longueur du prefix à réserver (24 pour un /24)"
  type        = number
}

variable "tag_ids" {
  description = "Tags qui doivent être présents sur le prefix (optionnel)"
  type        = list(string)
  default     = []
}

variable "description" {
  description = "Description qui sera ajoutée dans NetBox"
  type        = string
}

variable "role" {
  description = "Rôle NetBox (optionnel)"
  type        = string
  default     = null
}

variable "status" {
  description = "Statut NetBox (ex : 'active')"
  type        = string
  default     = null
}
7️⃣ modules/prefix_alloc/outputs.tf
output "allocated_prefix" {
  description = "Le CIDR alloué"
  value       = netbox_prefix.allocated.prefix
}

output "allocated_prefix_id" {
  description = "Id NetBox du prefix créé"
  value       = netbox_prefix.allocated.id
}
✅ Comment l’utiliser
Initialisation

cd terraform-netbox
terraform init
Vérifiez que vous avez fourni un token

export TF_VAR_netbox_token="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
Voir le plan

terraform plan
Vous devriez voir « netbox_prefix.allocated » dans la liste des ressources créées.

Appliquer

terraform apply
🚀 Variante avec plusieurs aggregates via count
Si vous ne voulez pas gérer la liste dans un local, vous pouvez passer une variable de type list(object({ … })) et l’utiliser avec for_each comme montré ci‑dessus.
Pour un simple /24, la liste ne contient qu’un seul élément.

🛠️ Bonus : Utiliser l’environnent
Vous pouvez lier le token à la variable netbox_token avec :

variable "netbox_token" {
  description = "Token d’API NetBox (à mettre dans TF_VAR_netbox_token)"
  type        = string
  sensitive   = true
}
Et dans votre shell :

export TF_VAR_netbox_token="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
Aucune valeur par défaut n’est alors nécessaire et Terraform gardera le champ sensible hors‑ligne.

📜 Résumé
Chemin	Fichier	Contenu
main.tf	Racine	Provider, provider‑definition, locals, for_each module, outputs
variables.tf	Racine	netbox_url, netbox_token (sans default)
outputs.tf	Racine	allocated_prefixes, allocated_prefix_ids
versions.tf	Racine	Provider NetBox (facultatif mais recommandé)
modules/prefix_alloc/main.tf	Module	Data source + resource NetBox prefix
modules/prefix_alloc/variables.tf	Module	aggregate_id, prefix_length, tag_ids, description, role, status
modules/prefix_alloc/outputs.tf	Module	allocated_prefix, allocated_prefix_id
Avec ces fichiers, toutes les réservations listées dans local.reservations seront créées à chaque apply, et terraform plan vous montrera les changements à venir. 🚀

Downloading model
0 B / 0 B (0%)
