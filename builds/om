🔧 Faire en sorte que le module prefix_alloc utilise un provider alias
Vous avez déjà un provider NetBox déclaré à la racine :

provider "netbox" {
  url             = var.netbox_url
  token           = var.netbox_token
  skip_tls_verify = true
}
Mais vous voulez que le module puisse choisir l’un des deux alias (ex : netbox.staging ou netbox.prod).
Pour cela :

Déclarez plusieurs providers à la racine, chacun avec un alias.
Passez l’alias au module grâce à l’attribut providers du bloc module.
Dans le module, ne déclarez plus de bloc provider – Terraform l’associera automatiquement à l’alias transmis.
1️⃣ Racine – main.tf
terraform {
  required_version = ">= 1.3"

  required_providers {
    netbox = {
      source  = "cloudnativeapp/terraform-provider-netbox"
      version = ">= 0.19.0"
    }
  }
}

# ---- Provider « production » --------------------------------------------
provider "netbox" {
  alias          = "prod"
  url            = var.netbox_prod_url
  token          = var.netbox_prod_token
  skip_tls_verify = true
}

# ---- Provider « staging » -----------------------------------------------
provider "netbox" {
  alias          = "staging"
  url            = var.netbox_staging_url
  token          = var.netbox_staging_token
  skip_tls_verify = true
}

# ---- Variables ------------------------------------------------------------
variable "netbox_prod_url"        { type = string; default = "https://netbox.prod.example.com" }
variable "netbox_prod_token"      { type = string; sensitive = true }
variable "netbox_staging_url"    { type = string; default = "https://netbox.staging.example.com" }
variable "netbox_staging_token"  { type = string; sensitive = true }

# ---- Liste de réservations -----------------------------------------------
locals {
  reservations = [
    {
      name          = "private_rfc1918"
      aggregate_id  = 10
      prefix_length = 24
      tag_ids       = []
      env          = "prod"        # <- on indiquera l’alias
    },
    {
      name          = "bgp_public"
      aggregate_id  = 20
      prefix_length = 24
      tag_ids       = ["bgp"]
      env          = "staging"
    }
  ]
}

# ---- Instanciation du module -----------------------------------------------
module "prefix_alloc" {
  for_each = { for r in local.reservations : r.name => r }

  source = "./modules/prefix_alloc"

  aggregate_id  = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids       = each.value.tag_ids
  description   = "Allocated by Terraform (${each.key})"
  role          = null
  status        = "active"

  # **L’alias est passé ici !** -----------------------------------------------
  providers = {
    netbox = netbox[each.value.env]   # `netbox.prod` ou `netbox.staging`
  }
}

# ---- Sorties ---------------------------------------------------------------
output "allocated_prefixes" {
  description = "Map de nom => CIDR alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix }
}

output "allocated_prefix_ids" {
  description = "Map de nom => ID NetBox du prefix alloué"
  value       = { for k, m in module.prefix_alloc : k => m.allocated_prefix_id }
}
⚠️ Remarque
each.value.env doit être l’un des alias définis ("prod" ou "staging").
Vous pouvez aussi créer une variable provider_env = "prod" / "staging" et l’utiliser directement.

2️⃣ Module – modules/prefix_alloc/main.tf
Ne mettez plus de bloc provider.
Le provider sera injecté depuis la racine via providers = { netbox = netbox.prod } (ou staging).

# ── Recherche d’un /24 disponible ----------------------------------------
data "netbox_prefix" "available_prefix" {
  available = true
  container = var.aggregate_id
  length    = var.prefix_length
  tags      = var.tag_ids
}

# ── Création du prefix ----------------------------------------------------
resource "netbox_prefix" "allocated" {
  prefix      = data.netbox_prefix.available_prefix.prefix
  description = var.description
  role        = var.role
  status      = var.status
  tags        = var.tag_ids
}
Aucun provider n’est présent ici – Terraform l’associera à l’alias reçu depuis la racine.

3️⃣ Variables du module (inchangées) – modules/prefix_alloc/variables.tf
variable "aggregate_id"  { type = number }
variable "prefix_length" { type = number }
variable "tag_ids"       { type = list(string); default = [] }
variable "description"   { type = string }
variable "role"          { type = string; default = null }
variable "status"        { type = string; default = null }
4️⃣ Sorties du module – modules/prefix_alloc/outputs.tf
output "allocated_prefix"   { value = netbox_prefix.allocated.prefix }
output "allocated_prefix_id" { value = netbox_prefix.allocated.id }
Résultat
Chaque réservation dans local.reservations indique quel alias (prod ou staging) doit être utilisé.
Le bloc module "prefix_alloc" transmet explicitement l’alias (providers = { netbox = netbox.prod } ou netbox.staging).
Le module utilise ce provider, sans déclarer de bloc provider.
Si vous ajoutez un troisième environment (netbox.dev), ajoutez simplement un autre provider avec alias dev et étendez locals.reservations.env.
