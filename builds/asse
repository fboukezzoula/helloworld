3️⃣ Full, working files
Root – main.tf
terraform {
  required_version = ">= 1.3"

  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = ">= 1.12.2"
    }
  }
}

# Provider blocks – two aliases
provider "netbox" {
  alias          = "prod"
  url            = var.netbox_prod_url
  token          = var.netbox_prod_token
  skip_tls_verify = true
}

provider "netbox" {
  alias          = "staging"
  url            = var.netbox_staging_url
  token          = var.netbox_staging_token
  skip_tls_verify = true
}

# Variables
variable "netbox_prod_url"        { type = string }
variable "netbox_prod_token"      { type = string, sensitive = true }
variable "netbox_staging_url"    { type = string }
variable "netbox_staging_token"  { type = string, sensitive = true }

# Example reservations (replace with your own source)
locals {
  reservations = [
    { name = "private_rfc1918", aggregate_id = 10, prefix_length = 24, tag_ids = [], env = "prod" },
    { name = "public_bgp",     aggregate_id = 20, prefix_length = 24, tag_ids = ["bgp"], env = "staging" }
  ]
}

module "prefix_alloc_prod" {
  for_each = { for r in local.reservations : r.name => r if r.env == "prod" }

  source        = "./modules/prefix_alloc"
  aggregate_id  = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids       = each.value.tag_ids
  description   = "Allocated by Terraform (${each.key})"
  role          = null
  status        = "active"

  providers = { netbox = netbox.prod }
}

module "prefix_alloc_staging" {
  for_each = { for r in local.reservations : r.name => r if r.env == "staging" }

  source        = "./modules/prefix_alloc"
  aggregate_id  = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids       = each.value.tag_ids
  description   = "Allocated by Terraform (${each.key})"
  role          = null
  status        = "active"

  providers = { netbox = netbox.staging }
}

output "allocated_prefixes" {
  value = {
    for m in concat(values(module.prefix_alloc_prod), values(module.prefix_alloc_staging)) :
    m.key => m.value.allocated_prefix
  }
}
Module – modules/prefix_alloc/versions.tf
terraform {
  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = ">= 1.12.2"
    }
  }
}
Module – modules/prefix_alloc/variables.tf
variable "aggregate_id"   { type = number }
variable "prefix_length"  { type = number }
variable "tag_ids"        { type = list(string), default = [] }
variable "description"    { type = string }
variable "role"           { type = number, default = null }
variable "status"         { type = string, default = "active" }
Module – modules/prefix_alloc/main.tf
# 1. Get a free prefix
data "netbox_prefix" "available" {
  aggregate_id  = var.aggregate_id
  prefix_length = var.prefix_length
  tag_ids       = var.tag_ids
}

# 2. Allocate the prefix
resource "netbox_prefix" "allocated" {
  prefix     = data.netbox_prefix.available.prefix
  description = var.description
  role       = var.role
  status     = var.status
  tag_ids    = var.tag_ids
}
Module – modules/prefix_alloc/outputs.tf
output "allocated_prefix"    { value = netbox_prefix.allocated.prefix }
output "allocated_prefix_id" { value = netbox_prefix.allocated.id }
4️⃣ Verify
terraform init -upgrade
terraform providers   # should show only e‑breuninger/netbox
terraform plan
You should no longer see the “unsupported argument” errors.
If you still do, double‑check that terraform init downloaded the e-breuninger/netbox provider (terraform providers shows its source). If not, delete the .terraform directory and run terraform init again.








Thought for 27.9 seconds
































Bottom line – the *arguments are still being applied to the official NetBox provider (hashicorp/netbox), which does not expose url, token or skip_tls_verify.
Even though terraform providers reports that the source is e‑breuninger/netbox, somewhere in the module tree a provider declaration without a source is causing Terraform to fall back to the default provider.

Below is a systematic way to locate and fix that stray declaration and to make sure you are actually using the forked provider.

1. Confirm the provider that the root really pulls in
terraform providers
You should see only one provider that starts with

provider[registry.terraform.io/e-breuninger/netbox]
If that is true, the root is correct.

2. Find the “wrong” provider block
Terraform reports the error inside a provider block, so the block that contains the unsupported arguments must exist somewhere in the module tree (root or any nested module).
Search the entire repository for:

grep -R '^provider *"netbox"' -n .
You should look for any line that starts with provider "netbox" { and that does not contain an alias or a source.

Typical culprits:

Where it can live	What it looks like	Why it fails
In the root (outside of alias blocks)	provider "netbox" { url = … }	Picks the default provider (hashicorp/netbox).
Inside the prefix_alloc module (or any nested module)	provider "netbox" { url = … }	Same issue.
In another module you are calling (e.g. module "xyz" that also uses NetBox)	same pattern	Same issue.
Remove all such blocks – the only place you should declare a provider is in the root (with required_providers) and in the module you may optionally put a versions.tf that only declares the provider source (see step 4).

3. Ensure the module inherits the provider correctly
Your prefix_alloc module must NOT contain a provider block at all. If it does, delete it entirely. The module will automatically use the instance that the root passes in via the providers = { … } mapping.

Add a versions.tf (or provider.tf) inside the module that only specifies the same source:

# modules/prefix_alloc/versions.tf
terraform {
  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = ">= 1.12.2"   # pick the newest stable that supports the args
    }
  }
}
4. Re‑initialize cleanly
Clear the module cache so Terraform cannot fall back to a previously downloaded copy that used the wrong provider:

rm -rf .terraform .terraform/modules
terraform init -upgrade -reconfigure
-reconfigure forces Terraform to re‑evaluate the provider configuration even if it thinks nothing changed.

After init, run:

terraform providers
You should now see only the e-breuninger/netbox entry.

5. Verify that the arguments are supported
Run the schema command to inspect the arguments that the provider currently exposes:

terraform providers schema -no-color | grep -A3 -n 'netbox'
You should see something like:

  provider "netbox" {
    description = "NetBox provider"
    arguments = {
      url             = string
      token           = string
      skip_tls_verify = bool
    }
  }
If url, token, or skip_tls_verify are missing, you are using a provider version that does not expose them. Upgrade to a newer version:

terraform {
  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = "~> 1.15.0"   # adjust to the latest stable
    }
  }
}
Then run terraform init -upgrade -reconfigure again.

6. Run the plan
terraform plan
You should no longer see “unsupported argument” errors; the url, token, and skip_tls_verify arguments will be accepted.

TL;DR checklist
grep -R '^provider *"netbox"' -n . → delete every block without alias or source.
Keep only the root required_providers block that points to e-breuninger/netbox.
Add a versions.tf inside the module that declares the same provider source.
rm -rf .terraform .terraform/modules && terraform init -upgrade -reconfigure.
Verify with terraform providers and terraform providers schema.
Run terraform plan again.
Once step 4 succeeds and the schema shows the arguments, the plan will pass. If you still get the same error, paste the exact terraform providers schema output and the offending provider block snippet, and we’ll dig further.

Downloading model
0 B / 0 B (0%)

