3️⃣ Full, working files
Root – main.tf
terraform {
  required_version = ">= 1.3"

  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = ">= 1.12.2"
    }
  }
}

# Provider blocks – two aliases
provider "netbox" {
  alias          = "prod"
  url            = var.netbox_prod_url
  token          = var.netbox_prod_token
  skip_tls_verify = true
}

provider "netbox" {
  alias          = "staging"
  url            = var.netbox_staging_url
  token          = var.netbox_staging_token
  skip_tls_verify = true
}

# Variables
variable "netbox_prod_url"        { type = string }
variable "netbox_prod_token"      { type = string, sensitive = true }
variable "netbox_staging_url"    { type = string }
variable "netbox_staging_token"  { type = string, sensitive = true }

# Example reservations (replace with your own source)
locals {
  reservations = [
    { name = "private_rfc1918", aggregate_id = 10, prefix_length = 24, tag_ids = [], env = "prod" },
    { name = "public_bgp",     aggregate_id = 20, prefix_length = 24, tag_ids = ["bgp"], env = "staging" }
  ]
}

module "prefix_alloc_prod" {
  for_each = { for r in local.reservations : r.name => r if r.env == "prod" }

  source        = "./modules/prefix_alloc"
  aggregate_id  = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids       = each.value.tag_ids
  description   = "Allocated by Terraform (${each.key})"
  role          = null
  status        = "active"

  providers = { netbox = netbox.prod }
}

module "prefix_alloc_staging" {
  for_each = { for r in local.reservations : r.name => r if r.env == "staging" }

  source        = "./modules/prefix_alloc"
  aggregate_id  = each.value.aggregate_id
  prefix_length = each.value.prefix_length
  tag_ids       = each.value.tag_ids
  description   = "Allocated by Terraform (${each.key})"
  role          = null
  status        = "active"

  providers = { netbox = netbox.staging }
}

output "allocated_prefixes" {
  value = {
    for m in concat(values(module.prefix_alloc_prod), values(module.prefix_alloc_staging)) :
    m.key => m.value.allocated_prefix
  }
}
Module – modules/prefix_alloc/versions.tf
terraform {
  required_providers {
    netbox = {
      source  = "e-breuninger/netbox"
      version = ">= 1.12.2"
    }
  }
}
Module – modules/prefix_alloc/variables.tf
variable "aggregate_id"   { type = number }
variable "prefix_length"  { type = number }
variable "tag_ids"        { type = list(string), default = [] }
variable "description"    { type = string }
variable "role"           { type = number, default = null }
variable "status"         { type = string, default = "active" }
Module – modules/prefix_alloc/main.tf
# 1. Get a free prefix
data "netbox_prefix" "available" {
  aggregate_id  = var.aggregate_id
  prefix_length = var.prefix_length
  tag_ids       = var.tag_ids
}

# 2. Allocate the prefix
resource "netbox_prefix" "allocated" {
  prefix     = data.netbox_prefix.available.prefix
  description = var.description
  role       = var.role
  status     = var.status
  tag_ids    = var.tag_ids
}
Module – modules/prefix_alloc/outputs.tf
output "allocated_prefix"    { value = netbox_prefix.allocated.prefix }
output "allocated_prefix_id" { value = netbox_prefix.allocated.id }
4️⃣ Verify
terraform init -upgrade
terraform providers   # should show only e‑breuninger/netbox
terraform plan
You should no longer see the “unsupported argument” errors.
If you still do, double‑check that terraform init downloaded the e-breuninger/netbox provider (terraform providers shows its source). If not, delete the .terraform directory and run terraform init again.

Downloading model
0 B / 0 B (0%)
