def get_or_create_vrf(nb, name, subscription_id, description="", tags=None, enforce_unique=False):
    """Get or create a unique VRF per subscription in NetBox"""
    # Make slug unique by appending sanitized subscription ID
    sanitized_id = re.sub(r'[^a-z0-9-]', '-', subscription_id.lower())
    slug = f"{re.sub(r'[^a-z0-9-]', '-', name.lower())}-{sanitized_id}"
    unique_name = f"{name} ({subscription_id})"
    try:
        vrf = nb.ipam.vrfs.get(slug=slug)
        if vrf:
            needs_update = False
            if vrf.name != unique_name:
                vrf.name = unique_name
                needs_update = True
            if vrf.description != description:
                vrf.description = description
                needs_update = True
            if tags and set(tag.id for tag in vrf.tags) != set(tag['id'] for tag in tags):
                vrf.tags = tags
                needs_update = True
            if vrf.enforce_unique != enforce_unique:
                vrf.enforce_unique = enforce_unique
                needs_update = True
            if needs_update:
                vrf.save()
                logger.info(f"Updated VRF for subscription {name} with slug {slug}: ID {vrf.id}")
            else:
                logger.info(f"Found existing VRF for subscription {name} with slug {slug}: ID {vrf.id}")
            return vrf
    except Exception as e:
        logger.debug(f"Error getting VRF for {name}: {str(e)}")
    logger.info(f"Creating new VRF for subscription {name} with slug {slug}")
    return nb.ipam.vrfs.create(
        name=unique_name,
        slug=slug,
        description=description,
        tags=tags or [],
        enforce_unique=enforce_unique
    )
