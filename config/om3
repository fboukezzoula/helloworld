Below, I'll guide you through extending your script to support creating RIRs (Regional Internet Registries), Aggregates, and Tags in NetBox, then syncing the prefixes (from Azure VNets) into the appropriate aggregates. I'll also ensure that:
- Prefixes are placed into the "good" aggregate based on simple matching logic (e.g., by subscription name or tags—customizable).
- All tags from the aggregate are copied to the prefix.
- Additional tags (e.g., "dev", "prod", "azure", etc.) are applied to the prefixes (configurable via `config.yaml` or CLI).

This builds on your existing script (VNet-only sync, YAML/CLI parsing, custom fields with only subscription name, etc.). I've added new functions and logic while keeping it modular.

### Assumptions and Design
- **RIRs**: I'll add creation of RIRs (e.g., a custom "Azure" RIR or standard ones like "Private"). You can define them in `config.yaml`.
- **Aggregates**: These are top-level IP blocks (e.g., a /8 for "prod" environments). The script creates them if missing, assigns an RIR, and adds tags. Prefixes are "placed" into aggregates by ensuring the prefix is a child of the aggregate's range (NetBox handles hierarchy automatically when creating prefixes within an aggregate's range).
  - **Matching Logic**: To determine the "good" aggregate for a prefix, I'll use the subscription name (e.g., if it contains "dev", assign to "dev" aggregate). This is customizable—extend if needed (e.g., based on VNet name or region).
- **Tags**: 
  - Create/get tags like "dev", "prod", "azure".
  - Copy all tags from the assigned aggregate to the prefix.
  - Add extra tags defined in `config.yaml` (e.g., under `tags.additional_tags`).
- **Config.yaml Updates**: I've expanded the template with new sections for `rirs`, `aggregates`, and enhanced `tags`.
- **No Breaking Changes**: The core sync (VNets as prefixes) remains, but now prefixes are created/updated with aggregate assignment and tags.
- **Dependencies**: Assumes NetBox supports aggregates (IPAM > Aggregates) and you have write permissions.

### Updated config.yaml Template
Add/update these sections in your `config.yaml`. This is the full template with the new additions (builds on the previous one).

```yaml
# Configuration Azure to Netbox Sync
# Fichier de configuration pour la synchronisation Azure vers Netbox

# Configuration Netbox
netbox:
  url: "https://your-netbox-instance.com"  # e.g., http://localhost:8080 or your production URL
  token: "your-netbox-api-token"  # Your NetBox API token

# Configuration Azure
azure:
  authentication:
    method: "default"
    # client_id: "your-azure-client-id"
    # client_secret: "your-azure-client-secret"
    # tenant_id: "your-azure-tenant-id"
  subscriptions:
    process_all: true
    # specific_id: "12345678-1234-1234-1234-123456789012"
    # management_group:
    #   id: "mg-production"
    #   name: "Production Management Group"

# Configuration du mapping (unused in current sync but parsed)
mapping:
  site_prefix: "Azure-"
  device_type_prefix: "Azure"
  device_role_prefix: "Azure"
  manufacturer: "Microsoft Azure"
  default_interface: "eth0"
  max_name_length: 64

# Configuration des tags
# (Tags for aggregates and prefixes; additional_tags are added to all synced prefixes)
tags:
  # Tag principal pour les objets synchronisés
  sync_tag:
    name: "azure-sync"
    description: "Synced from Azure"
    
  # Tags additionnels (applied to all prefixes; e.g., "dev", "prod", "azure")
  additional_tags: ["azure"]  # Add more like ["dev", "prod"]

# New: Configuration for RIRs (create if missing)
rirs:
  - name: "Azure Private"  # Custom RIR for Azure
    slug: "azure-private"
    description: "Private ranges from Azure"
    is_private: true  # Set to true for private RIRs

# New: Configuration for Aggregates (create if missing; assign prefixes to them)
aggregates:
  - prefix: "10.0.0.0/8"  # e.g., Large block for prod
    rir: "Azure Private"  # Must match an RIR name above
    description: "Production Aggregate"
    tags: ["prod", "azure"]  # Tags to apply to this aggregate (will be copied to child prefixes)
    match_criteria: "prod"  # Subscription names containing this string will match this aggregate
  - prefix: "192.168.0.0/16"  # e.g., For dev
    rir: "Azure Private"
    description: "Development Aggregate"
    tags: ["dev", "azure"]
    match_criteria: "dev"  # Matching string (case-insensitive)

# Configuration des champs personnalisés
custom_fields:
  azure_subscription:
    enabled: true
    field_type: "text"
    description: "Azure subscription name"
  azure_subscription_url:
    enabled: true
    field_type: "url"
    description: "Direct link to Azure subscription portal"

# Configuration du logging
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Configuration des filtres (stub; logged but not implemented)
filters:
  regions:
    include: []
    exclude: []
  resource_groups:
    include: []
    exclude: []
  resource_names:
    include_patterns: []
    exclude_patterns: []

# Configuration SSL
ssl:
  verify: true

# Configuration des timeouts
timeouts:
  azure_api: 30
  netbox_api: 30
```

- **How Matching Works**: For each prefix, the script checks if the subscription name contains the `match_criteria` string (case-insensitive). If no match, it skips aggregate assignment (or you can add a default aggregate).
- **Customization**: Add more aggregates/RIRs as needed. Tags are lists of strings (NetBox tag names).

### Updated Python Script
This is the full script with the new features. I've added:
- `get_or_create_rir` and `get_or_create_aggregate` functions.
- Logic in `sync_to_netbox` to create RIRs/aggregates from config, match prefixes to aggregates, copy tags, and add additional tags.
- Parsing for the new config sections.

```python
#!/usr/bin/env python3

import os
import sys
import logging
import argparse
from pathlib import Path
import yaml
import re
from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential, ClientSecretCredential
from azure.mgmt.subscription import SubscriptionClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.managementgroups import ManagementGroupsAPI
from pynetbox import api
from pynetbox.core.query import RequestError
import requests

# Default logging config (can be overridden by YAML or CLI)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_config_yaml(config_path='config.yaml'):
    """Load configuration from YAML file if it exists"""
    config = {}
    config_file = Path(config_path)
    if config_file.exists():
        try:
            with open(config_file, 'r') as f:
                config = yaml.safe_load(f)
            logger.info(f"Loaded configuration from {config_path}")
        except yaml.YAMLError as e:
            logger.error(f"Error parsing {config_path}: {str(e)}")
        except Exception as e:
            logger.error(f"Error loading {config_path}: {str(e)}")
    else:
        logger.info(f"No {config_path} found; using defaults and CLI args")
    return config

def get_azure_credentials(config, args):
    """Get Azure credentials based on config and args"""
    auth_method = args.auth_method or config.get('azure', {}).get('authentication', {}).get('method', 'default')
    
    client_id = args.azure_client_id or config.get('azure', {}).get('authentication', {}).get('client_id')
    client_secret = args.azure_client_secret or config.get('azure', {}).get('authentication', {}).get('client_secret')
    tenant_id = args.azure_tenant_id or config.get('azure', {}).get('authentication', {}).get('tenant_id')
    
    if client_id and client_secret and tenant_id:
        logger.info("Using Azure Service Principal authentication")
        return ClientSecretCredential(
            tenant_id=tenant_id,
            client_id=client_id,
            client_secret=client_secret
        )
    elif auth_method == 'interactive':
        logger.info("Using interactive browser authentication for Azure")
        return InteractiveBrowserCredential()
    else:
        logger.info("Using default Azure credential chain")
        return DefaultAzureCredential()

def get_management_group_subscriptions(credential, management_group_id=None, management_group_name=None):
    logger.info("Getting subscriptions from management group")
    
    try:
        mg_client = ManagementGroupsAPI(credential)
        
        if management_group_name and not management_group_id:
            logger.info(f"Looking for management group with name: {management_group_name}")
            management_groups = mg_client.management_groups.list()
            for mg in management_groups:
                if mg.display_name == management_group_name:
                    management_group_id = mg.name
                    logger.info(f"Found management group ID: {management_group_id}")
                    break
            
            if not management_group_id:
                logger.error(f"Management group with name '{management_group_name}' not found")
                return []
        
        mg_details = mg_client.management_groups.get(
            group_id=management_group_id,
            expand="children",
            recurse=True
        )
        
        subscriptions = []
        
        def extract_subscriptions(mg_node):
            if hasattr(mg_node, 'children') and mg_node.children:
                for child in mg_node.children:
                    if child.type == "/subscriptions":
                        subscription_info = type('obj', (object,), {
                            'subscription_id': child.name,
                            'display_name': child.display_name
                        })
                        subscriptions.append(subscription_info)
                        logger.info(f"Found subscription: {child.display_name} ({child.name})")
                    elif child.type == "/providers/Microsoft.Management/managementGroups":
                        extract_subscriptions(child)
        
        extract_subscriptions(mg_details)
        
        logger.info(f"Found {len(subscriptions)} subscriptions in management group")
        return subscriptions
        
    except Exception as e:
        logger.error(f"Error getting subscriptions from management group: {str(e)}")
        return []

def get_azure_subscriptions(credential):
    logger.info("Getting Azure subscriptions")
    subscription_client = SubscriptionClient(credential)
    subscriptions = list(subscription_client.subscriptions.list())
    logger.info(f"Found {len(subscriptions)} subscriptions")
    return subscriptions

def get_vnets_and_subnets(subscription_id, credential):
    logger.info(f"Getting VNets for subscription {subscription_id}")
    network_client = NetworkManagementClient(credential, subscription_id)
    
    vnets = list(network_client.virtual_networks.list_all())
    logger.info(f"Found {len(vnets)} VNets in subscription {subscription_id}")
    
    vnet_data = []
    for vnet in vnets:
        vnet_info = {
            'name': vnet.name,
            'id': vnet.id,
            'resource_group': vnet.id.split('/')[4],
            'location': vnet.location,
            'address_space': [prefix for prefix in vnet.address_space.address_prefixes]
        }
        vnet_data.append(vnet_info)
    
    return vnet_data

def get_or_create_rir(nb, name, slug, description, is_private=False):
    """Get or create an RIR in NetBox"""
    try:
        rir = nb.ipam.rirs.get(slug=slug)
        if rir:
            logger.info(f"Found existing RIR: {name}")
            return rir
    except Exception as e:
        logger.debug(f"Error getting RIR {name}: {str(e)}")
    
    logger.info(f"Creating new RIR: {name}")
    return nb.ipam.rirs.create(
        name=name,
        slug=slug,
        description=description,
        is_private=is_private
    )

def get_or_create_aggregate(nb, prefix, rir_id, description, tags):
    """Get or create an Aggregate in NetBox"""
    try:
        aggregate = nb.ipam.aggregates.get(prefix=prefix)
        if aggregate:
            logger.info(f"Found existing aggregate: {prefix}")
            return aggregate
    except Exception as e:
        logger.debug(f"Error getting aggregate {prefix}: {str(e)}")
    
    logger.info(f"Creating new aggregate: {prefix}")
    return nb.ipam.aggregates.create(
        prefix=prefix,
        rir=rir_id,
        description=description,
        tags=tags
    )

def get_or_create_tag(nb, tag_name, tag_description=""):
    """Get or create a tag in Netbox (simplified for multiple tags)"""
    slug = tag_name.lower().replace(" ", "-")
    try:
        tag = nb.extras.tags.get(slug=slug)
        if tag:
            logger.info(f"Found existing tag: {tag_name}")
            return tag
    except Exception as e:
        logger.debug(f"Error getting tag {tag_name}: {str(e)}")
    
    logger.info(f"Creating new tag: {tag_name}")
    return nb.extras.tags.create(
        name=tag_name,
        slug=slug,
        description=tag_description
    )

def get_or_create_custom_field(nb, field_name, field_type, field_description, object_types, field_choices=None):
    try:
        custom_field = nb.extras.custom_fields.get(name=field_name)
        if custom_field:
            logger.info(f"Found existing custom field: {field_name}")
            return custom_field
    except Exception as e:
        logger.debug(f"Error getting custom field {field_name}: {str(e)}")

    logger.info(f"Creating new custom field: {field_name}")
    field_data = {
        'name': field_name,
        'label': field_name.replace('_', ' ').title(),
        'type': field_type,
        'description': field_description,
        'object_types': object_types,
        'required': False,
        'default': None
    }
    if field_choices:
        field_data['choices'] = field_choices

    return nb.extras.custom_fields.create(**field_data)

def get_or_create_prefix(nb, prefix_value, defaults, subscription_name=None, subscription_id=None, aggregate_id=None, tags=None):
    """Get or create a prefix in Netbox, with optional aggregate and tags"""
    try:
        existing_prefixes = nb.ipam.prefixes.filter(prefix=prefix_value)
        
        if existing_prefixes:
            logger.info(f"Found existing prefix: {prefix_value}")
            prefix = list(existing_prefixes)[0]
            
            needs_update = False
            for key, value in defaults.items():
                if key == 'parent':  
                    continue
                current_value = getattr(prefix, key, None)
                if current_value != value:
                    setattr(prefix, key, value)
                    needs_update = True
            
            if subscription_name and subscription_id:
                custom_fields = getattr(prefix, 'custom_fields', {}) or {}
                azure_subscription_value = subscription_name
                
                existing_value = custom_fields.get('azure_subscription', '')
                if existing_value != azure_subscription_value or re.search(r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}', existing_value, re.IGNORECASE):
                    custom_fields['azure_subscription'] = azure_subscription_value
                    custom_fields['azure_subscription_url'] = f"https://portal.azure.com/#@/subscription/{subscription_id}/overview"
                    prefix.custom_fields = custom_fields
                    needs_update = True
                    logger.debug(f"Forced update of azure_subscription to clean value: {azure_subscription_value}")
            
            # Update aggregate if provided
            if aggregate_id and getattr(prefix, 'aggregate', None) != aggregate_id:
                prefix.aggregate = aggregate_id
                needs_update = True
            
            # Update tags if provided
            if tags and set(tag.id for tag in prefix.tags) != set(tag['id'] for tag in tags):
                prefix.tags = tags
                needs_update = True
            
            if needs_update:
                prefix.save()
                logger.info(f"Updated prefix: {prefix_value}")
                
            return prefix, False
    except AttributeError as e:
        logger.error(f"Attribute error when updating prefix {prefix_value}: {str(e)}")
    except Exception as e:
        logger.debug(f"Error checking for existing prefix {prefix_value}: {str(e)}")
    
    try:
        logger.info(f"Creating new prefix: {prefix_value}")
        
        if subscription_name and subscription_id:
            if 'custom_fields' not in defaults:
                defaults['custom_fields'] = {}
            defaults['custom_fields']['azure_subscription'] = subscription_name
            defaults['custom_fields']['azure_subscription_url'] = f"https://portal.azure.com/#@/subscription/{subscription_id}/overview"
        
        # Add aggregate and tags to creation defaults
        if aggregate_id:
            defaults['aggregate'] = aggregate_id
        if tags:
            defaults['tags'] = tags
        
        return nb.ipam.prefixes.create(
            prefix=prefix_value,
            **defaults
        ), True
    except RequestError as e:
        if "Duplicate prefix found" in str(e):
            logger.warning(f"Duplicate prefix found: {prefix_value}. Attempting to retrieve existing prefix.")
            try:
                existing_prefixes = nb.ipam.prefixes.filter(prefix=prefix_value)
                if existing_prefixes:
                    prefix = list(existing_prefixes)[0]
                    logger.info(f"Retrieved existing prefix: {prefix_value}")
                    return prefix, False
            except Exception as inner_e:
                logger.error(f"Error retrieving duplicate prefix {prefix_value}: {str(inner_e)}")
        raise

def setup_rirs_and_aggregates(nb, config):
    """Setup RIRs and Aggregates from config"""
    rirs_config = config.get('rirs', [])
    aggregates_config = config.get('aggregates', [])
    
    # Create RIRs and map name to ID
    rir_map = {}
    for rir in rirs_config:
        created_rir = get_or_create_rir(
            nb,
            name=rir.get('name'),
            slug=rir.get('slug'),
            description=rir.get('description', ''),
            is_private=rir.get('is_private', False)
        )
        rir_map[rir['name']] = created_rir.id
    
    # Create Aggregates
    aggregate_map = {}
    for agg in aggregates_config:
        rir_id = rir_map.get(agg.get('rir'))
        if not rir_id:
            logger.error(f"RIR {agg.get('rir')} not found for aggregate {agg.get('prefix')}")
            continue
        
        # Create/get tags for aggregate
        agg_tags = []
        for tag_name in agg.get('tags', []):
            tag = get_or_create_tag(nb, tag_name)
            agg_tags.append({'id': tag.id})
        
        created_agg = get_or_create_aggregate(
            nb,
            prefix=agg.get('prefix'),
            rir_id=rir_id,
            description=agg.get('description', ''),
            tags=agg_tags
        )
        aggregate_map[agg.get('prefix')] = {
            'id': created_agg.id,
            'tags': agg_tags,
            'match_criteria': agg.get('match_criteria', '')
        }
    
    return aggregate_map

def setup_custom_fields(nb, config):
    logger.info("Setting up custom fields for Azure integration")
    custom_fields_config = config.get('custom_fields', {})
    
    try:
        if custom_fields_config.get('azure_subscription', {}).get('enabled', True):
            get_or_create_custom_field(
                nb,
                field_name="azure_subscription",
                field_type=custom_fields_config.get('azure_subscription', {}).get('field_type', 'text'),
                field_description=custom_fields_config.get('azure_subscription', {}).get('description', "Azure subscription name"),
                object_types=["ipam.prefix"]
            )
        
        if custom_fields_config.get('azure_subscription_url', {}).get('enabled', True):
            get_or_create_custom_field(
                nb,
                field_name="azure_subscription_url",
                field_type=custom_fields_config.get('azure_subscription_url', {}).get('field_type', 'url'),
                field_description=custom_fields_config.get('azure_subscription_url', {}).get('description', "Direct link to Azure subscription portal"),
                object_types=["ipam.prefix"]
            )
        logger.info("Custom fields setup completed")
    except Exception as e:
        logger.error(f"Error setting up custom fields: {str(e)}")

def sync_to_netbox(all_network_data, netbox_url, netbox_token, config):
    logger.info(f"Syncing data to Netbox at {netbox_url}")
    
    session = requests.Session()
    session.verify = config.get('ssl', {}).get('verify', True)
    session.timeout = config.get('timeouts', {}).get('netbox_api', 30)
    
    nb = api(netbox_url, token=netbox_token)
    nb.http_session = session
    
    setup_custom_fields(nb, config)
    
    # Setup RIRs and Aggregates
    aggregate_map = setup_rirs_and_aggregates(nb, config)
    
    # Get sync tag
    sync_tag_config = config.get('tags', {}).get('sync_tag', {})
    azure_tag = get_or_create_tag(
        nb,
        tag_name=sync_tag_config.get('name', "azure-sync"),
        tag_description=sync_tag_config.get('description', "Synced from Azure")
    )
    azure_tag_dict = [{'id': azure_tag.id}]
    
    # Get additional tags from config
    additional_tags = []
    for tag_name in config.get('tags', {}).get('additional_tags', []):
        tag = get_or_create_tag(nb, tag_name)
        additional_tags.append({'id': tag.id})
    
    for subscription_data in all_network_data:
        subscription_id = subscription_data['subscription_id']
        subscription_name = subscription_data['subscription_name']
        
        for vnet in subscription_data['vnets']:
            for address_space in vnet['address_space']:
                # Find matching aggregate
                matching_aggregate = None
                for agg_prefix, agg_data in aggregate_map.items():
                    criteria = agg_data['match_criteria'].lower()
                    if criteria in subscription_name.lower():
                        matching_aggregate = agg_data
                        break
                
                aggregate_id = matching_aggregate['id'] if matching_aggregate else None
                prefix_tags = azure_tag_dict + additional_tags
                if matching_aggregate:
                    prefix_tags += matching_aggregate['tags']  # Copy aggregate tags
                
                vnet_prefix, created = get_or_create_prefix(
                    nb,
                    address_space,
                    {
                        'description': f"Azure VNet: {vnet['name']} (Subscription: {subscription_id})",
                        'status': 'active',
                        'tags': prefix_tags
                    },
                    subscription_name=subscription_name,
                    subscription_id=subscription_id,
                    aggregate_id=aggregate_id,
                    tags=prefix_tags
                )
                
                action = "Created" if created else "Updated"
                logger.info(f"{action} prefix for VNet {vnet['name']}: {address_space} (Aggregate: {aggregate_id if aggregate_id else 'None'})")

def parse_arguments():
    parser = argparse.ArgumentParser(description='Sync Azure network data to Netbox')
    parser.add_argument('--netbox-url', help='Netbox URL')
    parser.add_argument('--netbox-token', help='Netbox API token')
    parser.add_argument('--auth-method', help='Azure auth method (default, interactive)')
    parser.add_argument('--subscription-id', help='Specific Azure subscription ID to process')
    parser.add_argument('--management-group-id', help='Azure Management Group ID')
    parser.add_argument('--management-group-name', help='Azure Management Group name')
    parser.add_argument('--azure-client-id', help='Azure Service Principal Client ID (appId)')
    parser.add_argument('--azure-client-secret', help='Azure Service Principal Client Secret')
    parser.add_argument('--azure-tenant-id', help='Azure Tenant ID')
    return parser.parse_args()

def main():
    config = load_config_yaml()
    
    args = parse_arguments()
    
    netbox_url = args.netbox_url or config.get('netbox', {}).get('url')
    netbox_token = args.netbox_token or config.get('netbox', {}).get('token')
    
    if not netbox_url or not netbox_token:
        logger.error("Netbox URL and token must be provided either as arguments or in config.yaml")
        sys.exit(1)
    
    log_level = config.get('logging', {}).get('level', 'DEBUG')
    log_format = config.get('logging', {}).get('format', '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logging.basicConfig(level=log_level, format=log_format)
    
    filters = config.get('filters', {})
    if filters.get('regions', {}).get('include'):
        logger.warning("Region include filters set but not implemented yet")
    
    try:
        logger.info("Starting Azure to Netbox sync")
        
        credential = get_azure_credentials(config, args)
        
        process_all = config.get('azure', {}).get('subscriptions', {}).get('process_all', True)
        specific_id = args.subscription_id or config.get('azure', {}).get('subscriptions', {}).get('specific_id')
        mg_id = args.management_group_id or config.get('azure', {}).get('subscriptions', {}).get('management_group', {}).get('id')
        mg_name = args.management_group_name or config.get('azure', {}).get('subscriptions', {}).get('management_group', {}).get('name')
        
        if mg_id or mg_name:
            subscriptions = get_management_group_subscriptions(credential, mg_id, mg_name)
            if not subscriptions:
                logger.error("No subscriptions found in the specified management group")
                sys.exit(1)
        elif specific_id:
            logger.info(f"Processing only subscription {specific_id}")
            sub_client = SubscriptionClient(credential)
            try:
                sub_details = sub_client.subscriptions.get(specific_id)
                real_display_name = sub_details.display_name
                logger.info(f"Retrieved real display name for subscription {specific_id}: {real_display_name}")
            except Exception as e:
                logger.warning(f"Could not retrieve display name for {specific_id}: {str(e)}. Using fallback.")
                real_display_name = f"Subscription {specific_id}"
            subscriptions = [type('obj', (object,), {
                'subscription_id': specific_id,
                'display_name': real_display_name
            })]
        elif process_all:
            subscriptions = get_azure_subscriptions(credential)
        else:
            logger.error("No subscription processing method specified")
            sys.exit(1)
        
        all_network_data = []
        
        for subscription in subscriptions:
            subscription_id = subscription.subscription_id
            subscription_data = {
                'subscription_id': subscription_id,
                'subscription_name': subscription.display_name,
                'vnets': []
            }
            
            vnets_data = get_vnets_and_subnets(subscription_id, credential)
            subscription_data['vnets'] = vnets_data
            all_network_data.append(subscription_data)
        
        sync_to_netbox(all_network_data, netbox_url, netbox_token, config)
        
        logger.info("Azure to Netbox sync completed successfully")
        
    except Exception as e:
        logger.error(f"Error during Azure to Netbox sync: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
```

### How It Works
1. **RIR Creation**: In `setup_rirs_and_aggregates`, RIRs are created from `config.yaml` (e.g., "Azure Private").
2. **Aggregate Creation**: Aggregates are created with the specified prefix, RIR, description, and tags. Their IDs are mapped for later use.
3. **Prefix Sync**:
   - For each prefix, match to an aggregate based on `match_criteria` (e.g., if subscription name has "prod", use the "prod" aggregate).
   - Assign the aggregate ID to the prefix.
   - Copy aggregate tags to the prefix.
   - Add the sync tag and any `additional_tags` from config.
4. **Logging**: You'll see messages like "Created aggregate: 10.0.0.0/8" and "Updated prefix for VNet X: Y (Aggregate: Z)".

### Testing
- Update `config.yaml` with your RIRs/aggregates/tags.
- Run the script. Check NetBox under IPAM > RIRs, Aggregates, and Prefixes to verify creation and tag copying.
- If no aggregate matches, the prefix is created without one (logs "Aggregate: None").

If the matching logic needs tweaking (e.g., based on VNet name instead of subscription), or if you want to add more features (e.g., auto-creating aggregates based on prefix ranges), provide details or logs!
