apiVersion: v1
kind: Pod
metadata:
  name: code-server-s3
spec:
  initContainers:
    - name: sync-config-down
      image: rclone/rclone:latest
      args:
        - sync
        - s3:my-bucket/config
        - /shared/config
        - --create-empty-src-dirs
        - -v
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretKey
        - name: RCLONE_CONFIG_S3_TYPE
          value: "s3"
        - name: RCLONE_CONFIG_S3_PROVIDER
          value: "Other"
        - name: RCLONE_CONFIG_S3_ENDPOINT
          value: "https://your-scality-endpoint.com"
        - name: RCLONE_CONFIG_S3_FORCE_PATH_STYLE
          value: "true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: shared-config
          mountPath: /shared/config

  containers:
    # ---
apiVersion: v1
kind: Secret
metadata:
  name: custom-ca-cert
type: Opaque
data:
  ca.pem: LS0tLS1CRUdJTi... # Votre certificat CA en base64

--- Sidecar rclone sync périodique ---
    - name: rclone-sync
      image: rclone/rclone:latest
      command:
        - sh
        - -c
        - |
          echo "Démarrage sync périodique..."
          while true; do
            echo "$(date): Sync config vers S3..."
            rclone sync /shared/config s3:my-bucket/config --exclude "*.tmp" --exclude "*.lock" -v
            echo "$(date): Sync terminé"
            sleep 300  # Sync toutes les 5min
          done
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretKey
        - name: RCLONE_CONFIG_S3_TYPE
          value: "s3"
        - name: RCLONE_CONFIG_S3_PROVIDER
          value: "AWS"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: shared-config
          mountPath: /shared/config

    # --- Code-server ---
    - name: code-server
      image: codercom/code-server:latest
      args:
        - --bind-addr=0.0.0.0:8080
        - --auth=password
        - --disable-telemetry
        - /workspace
      env:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: code-server-secret
              key: password
        - name: SHELL
          value: /bin/bash
      ports:
        - containerPort: 8080
          name: http
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: shared-config
          mountPath: /home/coder/.config
      readinessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 10
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 30
      resources:
        requests:
          memory: 512Mi
          cpu: 100m
        limits:
          memory: 2Gi
          cpu: 1000m

  volumes:
    - name: workspace
      emptyDir:
        sizeLimit: 10Gi
    - name: shared-config
      emptyDir:
        sizeLimit: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: code-server-service
spec:
  selector:
    app: code-server
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  type: ClusterIP

---
apiVersion: v1
kind: Secret
metadata:
  name: s3-credentials
type: Opaque
stringData:
  accessKey: "YOUR_S3_ACCESS_KEY"
  secretKey: "YOUR_S3_SECRET_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: code-server-secret
type: Opaque
stringData:
  password: "your-code-server-password"




*************

Étapes pour configurer le CA :

Créez le secret avec votre certificat :

bash   kubectl create secret generic custom-ca-cert \
     --from-file=ca.pem=/path/to/your/ca-cert.pem

Alternatives pour rclone avec CA custom :
Option A : Variable RCLONE_CA_BUNDLE (comme dans l'artifact)
Option B : Désactiver la vérification SSL (non recommandé) :

yaml   - name: RCLONE_CONFIG_S3_NO_CHECK_CERTIFICATE
     value: "true"
Option C : Concaténer avec les CAs système :
yaml   command:
     - sh
     - -c
     - |
       cat /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/custom-ca.pem > /tmp/combined-ca.pem
       export RCLONE_CA_BUNDLE=/tmp/combined-ca.pem
       rclone sync s3:my-bucket/config /shared/config --create-empty-src-dirs -v
Test de connectivité :
bashkubectl exec -it code-server-s3 -c sync-config-down -- rclone lsd s3:my-bucket

La variable RCLONE_CA_BUNDLE est l'équivalent de AWS_CA_BUNDLE pour rclone.



[scality-s3]
type = s3
provider = Other
env_auth = false
access_key_id = YOUR_ACCESS_KEY
secret_access_key = YOUR_SECRET_KEY
endpoint = https://your-scality-endpoint.example.com
region = us-east-1
location_constraint =
acl = private
storage_class =
no_check_bucket = true
v2_auth = false
server_side_encryption =
encoding = Slash,Dot
# Path to your custom CA certificate
ca_cert = /path/to/your/ca-bundle.pem

















Here is a full example of an rclone.conf entry for an S3-compatible storage (like Scality) with a custom CA certificate:

INI
[scality-s3]
type = s3
provider = Other
env_auth = false
access_key_id = YOUR_ACCESS_KEY
secret_access_key = YOUR_SECRET_KEY
endpoint = https://your-scality-endpoint.example.com
region = us-east-1
location_constraint =
acl = private
storage_class =
no_check_bucket = true
v2_auth = false
server_side_encryption =
encoding = Slash,Dot
# Path to your custom CA certificate
ca_cert = /path/to/your/ca-bundle.pem
How to use:

Replace YOUR_ACCESS_KEY and YOUR_SECRET_KEY with your Scality credentials.
Set endpoint to the Scality S3 endpoint URL.
Update ca_cert to the local file path of your CA certificate bundle (in PEM format).
Note:

Make sure your rclone version supports the ca_cert option (rclone v1.58.0 and above).
The ca_cert parameter tells rclone to use a custom CA certificate when connecting to S3, which is useful for self-signed or private certificate authorities.
Let me know if you need a sample CA certificate file or more details!

bucket name ?
The rclone configuration example I provided earlier does not specify a bucket name directly in the config file (rclone.conf). The bucket name is typically provided as part of the remote path when you use rclone commands.

For example, if your bucket is named my-bucket, you would reference it like this in rclone commands:

rclone ls scality-s3:my-bucket

scality-s3 is the name of the remote (from the rclone.conf section).
my-bucket is the bucket name.
If you want to specify or create a bucket, you do so when running rclone commands, not in the config itself.

Would you like an example command using a specific bucket name? If so, please provide the bucket name you'd like to use, or let me know if you want advice on naming conventions!

with env file 
Here’s a complete example for configuring rclone with Scality S3, a custom CA certificate, and using an environment (.env) file to manage credentials and endpoints.

1. .env File Example
Create a file named .env (in the same directory where you run rclone), with these contents:

env
RCLONE_S3_ACCESS_KEY_ID=YOUR_ACCESS_KEY
RCLONE_S3_SECRET_ACCESS_KEY=YOUR_SECRET_KEY
RCLONE_S3_ENDPOINT=https://your-scality-endpoint.example.com
RCLONE_S3_CA_CERT=/path/to/your/ca-bundle.pem
Replace the values as needed for your environment.

2. rclone.conf Example
In your ~/.config/rclone/rclone.conf (as referenced in home.txt):

INI
[scality-s3]
type = s3
provider = Other
env_auth = true
region = us-east-1
no_check_bucket = true
env_auth = true tells rclone to use environment variables for credentials and endpoint.
Do not specify keys, secret, endpoint, or ca_cert directly in this file.
3. Usage Example (with bucket name)
Suppose your bucket is named my-bucket. Use a command like:

bash
export $(grep -v '^#' .env | xargs)  # Load the .env variables into the environment

rclone ls scality-s3:my-bucket
4. How rclone uses the env variables
RCLONE_S3_ACCESS_KEY_ID → AWS Access Key
RCLONE_S3_SECRET_ACCESS_KEY → AWS Secret Key
RCLONE_S3_ENDPOINT → S3-compatible endpoint (Scality)
RCLONE_S3_CA_CERT → Path to your custom CA certificate
Summary
Bucket name is referenced in the rclone command, not the config.
All sensitive info is managed via the .env file.
Use env_auth = true in the config to activate environment variable usage.
The CA certificate path is set via an environment variable.
Let me know if you need a sample CA certificate or further details!






