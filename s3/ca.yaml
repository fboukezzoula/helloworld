apiVersion: v1
kind: Pod
metadata:
  name: code-server-s3
spec:
  initContainers:
    - name: sync-config-down
      image: rclone/rclone:latest
      args:
        - sync
        - s3:my-bucket/config
        - /shared/config
        - --create-empty-src-dirs
        - -v
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretKey
        - name: RCLONE_CONFIG_S3_TYPE
          value: "s3"
        - name: RCLONE_CONFIG_S3_PROVIDER
          value: "Other"
        - name: RCLONE_CONFIG_S3_ENDPOINT
          value: "https://your-scality-endpoint.com"
        - name: RCLONE_CONFIG_S3_FORCE_PATH_STYLE
          value: "true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: shared-config
          mountPath: /shared/config

  containers:
    # ---
apiVersion: v1
kind: Secret
metadata:
  name: custom-ca-cert
type: Opaque
data:
  ca.pem: LS0tLS1CRUdJTi... # Votre certificat CA en base64

--- Sidecar rclone sync périodique ---
    - name: rclone-sync
      image: rclone/rclone:latest
      command:
        - sh
        - -c
        - |
          echo "Démarrage sync périodique..."
          while true; do
            echo "$(date): Sync config vers S3..."
            rclone sync /shared/config s3:my-bucket/config --exclude "*.tmp" --exclude "*.lock" -v
            echo "$(date): Sync terminé"
            sleep 300  # Sync toutes les 5min
          done
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretKey
        - name: RCLONE_CONFIG_S3_TYPE
          value: "s3"
        - name: RCLONE_CONFIG_S3_PROVIDER
          value: "AWS"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: shared-config
          mountPath: /shared/config

    # --- Code-server ---
    - name: code-server
      image: codercom/code-server:latest
      args:
        - --bind-addr=0.0.0.0:8080
        - --auth=password
        - --disable-telemetry
        - /workspace
      env:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: code-server-secret
              key: password
        - name: SHELL
          value: /bin/bash
      ports:
        - containerPort: 8080
          name: http
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: shared-config
          mountPath: /home/coder/.config
      readinessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 10
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 30
      resources:
        requests:
          memory: 512Mi
          cpu: 100m
        limits:
          memory: 2Gi
          cpu: 1000m

  volumes:
    - name: workspace
      emptyDir:
        sizeLimit: 10Gi
    - name: shared-config
      emptyDir:
        sizeLimit: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: code-server-service
spec:
  selector:
    app: code-server
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  type: ClusterIP

---
apiVersion: v1
kind: Secret
metadata:
  name: s3-credentials
type: Opaque
stringData:
  accessKey: "YOUR_S3_ACCESS_KEY"
  secretKey: "YOUR_S3_SECRET_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: code-server-secret
type: Opaque
stringData:
  password: "your-code-server-password"




*************

Étapes pour configurer le CA :

Créez le secret avec votre certificat :

bash   kubectl create secret generic custom-ca-cert \
     --from-file=ca.pem=/path/to/your/ca-cert.pem

Alternatives pour rclone avec CA custom :
Option A : Variable RCLONE_CA_BUNDLE (comme dans l'artifact)
Option B : Désactiver la vérification SSL (non recommandé) :

yaml   - name: RCLONE_CONFIG_S3_NO_CHECK_CERTIFICATE
     value: "true"
Option C : Concaténer avec les CAs système :
yaml   command:
     - sh
     - -c
     - |
       cat /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/custom-ca.pem > /tmp/combined-ca.pem
       export RCLONE_CA_BUNDLE=/tmp/combined-ca.pem
       rclone sync s3:my-bucket/config /shared/config --create-empty-src-dirs -v
Test de connectivité :
bashkubectl exec -it code-server-s3 -c sync-config-down -- rclone lsd s3:my-bucket

La variable RCLONE_CA_BUNDLE est l'équivalent de AWS_CA_BUNDLE pour rclone.


